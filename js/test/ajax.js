// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(['chai', 'sinon', 'jquery'], function(_arg, sinon, $) {
    var expect;
    expect = _arg.expect;
    return describe('Promises', function() {
      var server;
      server = sinon.fakeServer.create();
      server.respondWith('GET', '/users', [
        200, {
          "Content-Type": "application/json"
        }, JSON.stringify([
          {
            name: 'Jack'
          }, {
            name: 'Bob'
          }
        ])
      ]);
      server.respondWith('GET', '/cars', [
        200, {
          "Content-Type": "application/json"
        }, JSON.stringify([
          {
            name: 'BMW'
          }, {
            name: 'VW'
          }
        ])
      ]);
      server.respondWith('GET', '/phones', [
        200, {
          "Content-Type": "application/json"
        }, JSON.stringify([
          {
            name: 'iPhone'
          }, {
            name: 'Lenovo'
          }
        ])
      ]);
      it('should response on ajax request', function(done) {
        var carsPromise, phonesPromise, totalPromise, usersPromise;
        usersPromise = $.get('/users', function() {});
        usersPromise.done(function(users) {
          arguments;
          return expect(users).to.deep.equal([
            {
              name: 'Jack'
            }, {
              name: 'Bob'
            }
          ]);
        });
        carsPromise = $.get('/cars');
        carsPromise.done(function(cars, statusText, jqXHR) {
          expect(jqXHR).to.be.equal(carsPromise);
          return expect(cars).to.deep.equal([
            {
              name: 'BMW'
            }, {
              name: 'VW'
            }
          ]);
        });
        phonesPromise = $.get('/phones');
        phonesPromise.done(function(phones) {
          return expect(phones).to.deep.equal([
            {
              name: 'iPhone'
            }, {
              name: 'Lenovo'
            }
          ]);
        });
        totalPromise = $.when(carsPromise, usersPromise, phonesPromise);
        totalPromise.done(function(carsArguments, usersArguments, phonesArguments) {
          return expect([carsArguments[0], usersArguments[0], phonesArguments[0]]).to.deep.equal([
            [
              {
                name: 'BMW'
              }, {
                name: 'VW'
              }
            ], [
              {
                name: 'Jack'
              }, {
                name: 'Bob'
              }
            ], [
              {
                name: 'iPhone'
              }, {
                name: 'Lenovo'
              }
            ]
          ]);
        });
        totalPromise.fail(function(xhr) {
          return expect(xhr).to.be.equal(carsPromise);
        });
        totalPromise.always(function() {
          return done();
        });
        return server.respond();
      });
      return it('should create promise and execute it', function(done) {
        var promise, secondPromise, timeout, _ref;
        timeout = function() {
          var defered;
          defered = new $.Deferred();
          setTimeout((function() {
            return defered.resolve('test', 10);
          }), Math.round(2000 * Math.random()));
          setTimeout((function() {
            return defered.reject('error', {
              message: 'Fuck'
            });
          }), Math.round(2000 * Math.random()));
          setInterval((function() {
            return defered.notify('in progress...');
          }), 50);
          return [defered.promise(), defered.promise()];
        };
        _ref = timeout(), promise = _ref[0], secondPromise = _ref[1];
        console.log(promise);
        promise.done(function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return expect(args).to.deep.equal(['test', 10]);
        });
        promise.fail(function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return expect(args).to.deep.equal([
            'error', {
              message: 'Fuck'
            }
          ]);
        });
        promise.progress(function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return console.log(args);
        });
        promise.always(function() {
          console.log(arguments);
          return done();
        });
        return secondPromise.always(function() {
          return console.log(arguments);
        });
      });
    });
  });

}).call(this);
